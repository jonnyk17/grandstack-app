scalar Point
scalar DateTime
scalar PointInput

type User {
  displayName: String!
  userName: String!
  password: String!
  Sport: String!
  Age: Int!
  Height: String!
  Weight: Int!
  Event: [Events] @relationship(type: "COMPETED", direction: IN)
  Records: [Record] @relationship(type: "PERSONALBEST", direction: IN)
  # reviews: [Review] @relationship(type: "WROTE", direction: OUT)
  # avgStars: Float
  #   @cypher(
  #     statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
  #   )
  # numReviews: Int
  #   @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
  # recommendations(first: Int = 3): [Business]
  #   @cypher(
  #     statement: "MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business) WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) ) WITH rec, COUNT(*) AS num ORDER BY num DESC LIMIT $first RETURN rec"
  #   )
}
type Events {
  event: String!
  user: User @relationship(type: "COMPETED", direction: OUT)
  record: Record @relationship(type: "RECORDFOREVENT", direction: OUT)
}
type Record{
  record: String!
  user:User @relationship(type: "PERSONALBEST", direction: OUT)
  event:Events @relationship(type: "RECORDFOREVENT", direction: IN)

}

# # type Business {
# #   businessId: ID!
# #   name: String!
# #   address: String
# #   city: String
# #   state: String
# #   location: Point
# #   avgStars: Float
# #     @cypher(
# #       statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)"
# #     )
# #   reviews: [Review] @relationship(type: "REVIEWS", direction: IN)
# #   categories: [Category] @relationship(type: "IN_CATEGORY", direction: OUT)
# # }

# # type Review {
# #   reviewId: ID!
# #   stars: Float
# #   text: String
# #   date: DateTime
# #   business: Business @relationship(type: "REVIEWS", direction: OUT)
# #   user: User @relationship(type: "WROTE", direction: IN)
# # }

# # type Category {
# #   name: ID!
# #   businesses: [Business] @relationship(type: "IN_CATEGORY", direction: IN)
# # }

# # type RatingCount @exclude {
# #   stars: Float!
# #   count: Int!
# # }

# type Mutation {
#   # mergeBusinessCategory(categories: [String!]!, businessId: ID!): Business
#   #   @cypher(
#   #     statement: "MATCH (b:Business {businessId: $businessId}) UNWIND $categories AS cat MERGE (c:Category {name: cat}) MERGE (b)-[:IN_CATEGORY]->(c) RETURN b"
#   #   )
#   # mergeUser(name: String!, userId: ID!): User
#   #   @cypher(
#   #     statement: """
#   #     MERGE (u:User {userId: $userId})
#   #     ON CREATE SET u.name = $name
#   #     RETURN u
#   #     """
#   #   )
#   # mergeBusiness(
#   #   businessId: ID!
#   #   name: String!
#   #   address: String!
#   #   city: String!
#   #   state: String!
#   #   latitude: Float!
#   #   longitude: Float!
#   # ): Business
#   #   @cypher(
#   #     statement: """
#   #     MERGE (b:Business {businessId: $businessId})
#   #     ON CREATE SET b.name = $name,
#   #                   b.address = $address,
#   #                   b.city = $city,
#   #                   b.state = $state,
#   #                   b.location = Point({latitude: $latitude, longitude: $longitude})
#   #     RETURN b
#   #     """
#   #   )
# }

type Query {
  User(userName: String!): [Events]  @cypher(statement: "MATCH (u:User {userName: $userName})<-[:PERSONALBEST]-(r:Record)<-[:RECORDFOREVENT]-(event:Events) RETURN event, r")


  #   # userCount: Int! @cypher(statement: "MATCH (u:User) RETURN COUNT(u)")
  #   # ratingsCount: [RatingCount]
  #   #   @cypher(
  #   #     statement: "MATCH (r:Review) WITH r.stars AS stars, COUNT(*) AS count ORDER BY stars RETURN {stars: stars, count: count}"
  #   #   )
}


